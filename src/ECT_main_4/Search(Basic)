순차 탐색 : 리스트 안에 있는 특정한 데이터를 찾기 위해 앞에서부터
데이터를 하나씩 확인하는 방법

이진 탐색 : 정렬되어 있는 리스트에서 탐색 범위를 절반씩 좁혀가며
데이터를 탐색하는 방법
	- 이진 탐색은 시작점, 끝점, 중간점을 이용하여 탐색 범위를 설정
	

단계마다 탐색 범위를 2로 나누는 것과 동일하므로 연산 횟수는 log2N에 비례
예를 들어 초기 데이터 개수가 32일 때, 이상적으로 1단계를 거치면
16개 가량의 데이터만 남는다
	- 2단계를 거치면 8개 가량의 데이터만 남고
	- 3단계를 거치면 4개 가량의 데이터만 남는다.
	
다시 말해 이진 탐색은 탐색 범위를 절반씩 줄이며, 시간 복잡도는 O(logN)을 보장


<순차탐색>
import java.util.*;

public class Main {
	
	//순차 탐색 코드 구현
	public static int sequantalSearch(int n, String target, String[] arr){
		//각 원소를 하나씩 확인하며
		for(int i=0; i<n; i++){
			System.out.println(arr[i]);
			//현재 원소가 찾고자 하는 원소와 동일한 경우
			if(arr[i].equas(target)){
				return i+1;	//인덱스는 0부터 시작하므로 1을 더한다.
			}
		}
		return -1; //원소를 찾지 못한 경우 -1 반환
	}
	
	public static void main(String[] args){
		Scanner sc=new Scanner(System.in);
		
		System.out.println("생성할 원소 개수를 입력한 다음 한 칸 띄고 찾을 문자열을 입력하세요.");
		//원소의 개수
		int n=sc.nextInt();
		//찾고자 하는 문자열
		Strng target=sc.next();
		
		System.out.println("앞서 적은 원소 개수만큼 문자열을 입력하세요. 구분은 띄어쓰기 한 칸으로 합니다.");
		String[] arr=new String[n];
		for(int i=0; i<n; i++){
			arr[i]=sc.next();
			}
			
		//순차 탐색 수행 결과 출력
		System.out.println(seqantialSearch(n,target,arr));
		}	
	}	
		
//이진 탐색 소스코드 구현(재귀함수)
import java.util.*;

public class Main{
	
	public static int binarySearch(int[] arr, int target, int start, int end){
		if(start>end) return -1;
		int mid=(start+end)/2;
		//찾은 경우 중간점 인덱스 반환
		if(arr[mid] == target) return mid;
		//중간점의 값보다 찾고자 하는 값이 작은 경우 왼쪽 확인
		else if (arr[mid] > target) return binarySearch(arr,target,start,mid-1);
		//중간점의 값보다 찾고자 하는 값이 큰 경우 오른쪽 확인	
		else return binarySearch(arr,target,mid+1,end);
		}
		
		public static void main(String[] args){
			Scanner sc=new Scanner(System.in);
			
			//원소의 개수(n)와 찾고자 하는 값(target)을 입력받기
			int n=sc.nextInt();
			int target=sc.nextInt();
			
			//전체 원소 입력받기
			int[] arr=new int[n];
			for(int i=0; i<n; i++){
				arr[i]=sc.nextInt();
			}
			
			//이진 탐색 수행 결과 출력
			int result=binarySearch(arr,target,0, n-1);
			if(result==-1){
				System.out.println("원소가 존재하지 않습니다");
			}
			else{
				System.out.println(result+1);
				}
			]
		}
		
		
// 이진 탐색 소스코드 구현(반복문)	
import java.util.*;

public class Main {

    public static int binarySearch(int[] arr, int target, int start, int end) {
        while (start <= end) {
            int mid = (start + end) / 2;
            // 찾은 경우 중간점 인덱스 반환
            if (arr[mid] == target) return mid;
            // 중간점의 값보다 찾고자 하는 값이 작은 경우 왼쪽 확인
            else if (arr[mid] > target) end = mid - 1;
            // 중간점의 값보다 찾고자 하는 값이 큰 경우 오른쪽 확인
            else start = mid + 1; 
        }
        return -1;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        
        // 원소의 개수(n)와 찾고자 하는 값(target)을 입력받기 
        int n = sc.nextInt();
        int target = sc.nextInt();

        // 전체 원소 입력받기 
        
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = sc.nextInt();
        }

        // 이진 탐색 수행 결과 출력 
        int result = binarySearch(arr, target, 0, n - 1);
        if (result == -1) {
            System.out.println("원소가 존재하지 않습니다.");
        }
        else {
        
            System.out.println(result + 1);
            
        }
        
        
        
    }

}