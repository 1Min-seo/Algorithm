5. 계수 정렬
   - 특정한 조건이 부합할 때만 사용할 수 있지만 매우 빠르게 동작하는 정렬 알고리즘.
   - 계수 정렬은 데이터의 크기 범위가 제한되어 정수 형태로 표현할 수 있을 때 사용 가능.
   - 데이터의 개수가 N, 데이터(양수) 중 최댓값이 K일 때 최악의 경우에도
     수행 시간 O(N+K)를 보장함.

step 0)
	가장 작은 데이터부터 가장 큰 데이터까지의 범위가 모두 담길 수 있도록 리스트 생성

step 1)
	데이터를 하나씩 확인하며 데이터의 값과 동일한 인덱스의 데이터를 1씩 증가시킨다.

step 3)
	결과를 확인할 때는 리스트의 첫 번째 데이터부터 하나씩 그 값을 반복하여 인덱스를 출력
	

 import java.util.*;

public class Main {
	
    public static final int MAX_VALUE = 9;

    public static void main(String[] args) {
    	
        int n = 15;
        // 모든 원소의 값이 0보다 크거나 같다고 가정
        int[] arr =  {7, 5, 9, 0, 3, 1, 6, 2, 9, 1, 4, 8, 0, 5, 2};
        // 모든 범위를 포함하는 배열 선언(모든 값은 0으로 초기화)
        int[] cnt = new int[MAX_VALUE + 1];

        for (int i = 0; i < n; i++) {
            cnt[arr[i]] += 1; // 각 데이터에 해당하는 인덱스의 값 증가
        }
        for (int i = 0; i <= MAX_VALUE; i++) { // 배열에 기록된 정렬 정보 확인
            for (int j = 0; j < cnt[i]; j++) {
                System.out.print(i + " "); // 띄어쓰기를 기준으로 등장한 횟수만큼 인덱스 출력
            }
        }
    }

}



계수 정렬은 때에 따라서 심각한 비효율성을 초래할 수 있다.
	- 데이터가 0과 999,999로 단 2개만 존재하는 경우는 배열의 크기가 너무 커지기 때문이다.
계수 정렬은 동일한 값을 가지는 데이터가 여러 개 등장할 때 효과적으로 사용할 수 있다.
	- 성적의 경우 100점 맞은 학생이 여러 명일 수 있기 떄문에 계수 정렬이 효과적이다.
